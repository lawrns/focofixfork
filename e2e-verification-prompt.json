{
  "site_url": "https://cryptoiq.net",
  "verification_type": "comprehensive_e2e_testing",
  "test_duration_estimate": "15-20 minutes",
  "objective": "Verify all functionality works end-to-end on the production deployment at cryptoiq.net",

  "prompt": "You are testing a comprehensive project management application deployed at https://cryptoiq.net. This is a full-stack Next.js application with Supabase backend, real-time collaboration features, AI integration via Ollama, and extensive project management capabilities. Your task is to systematically verify EVERY feature works end-to-end in production.\n\n## CRITICAL INSTRUCTIONS:\n\n1. **Navigate to https://cryptoiq.net and begin testing**\n2. **Document EVERY issue you encounter** - no matter how small\n3. **Test EVERY feature listed below** - do not skip any\n4. **Report results in structured format** at the end\n5. **Take screenshots** of any errors or unexpected behavior\n6. **Test on multiple screen sizes** if possible (desktop, tablet, mobile)\n\n## AUTHENTICATION & USER FLOW:\n\n### 1. Authentication System\n- [ ] Navigate to https://cryptoiq.net\n- [ ] Verify landing page loads without errors\n- [ ] Check browser console for any errors (F12 → Console)\n- [ ] Test sign up flow:\n  - Click \"Sign Up\" or \"Get Started\"\n  - Enter email and password\n  - Verify email validation works\n  - Complete sign up process\n  - Check for confirmation email (if required)\n- [ ] Test sign in flow:\n  - Sign out if signed in\n  - Click \"Sign In\"\n  - Enter valid credentials\n  - Verify successful login and redirect to dashboard\n- [ ] Test password reset flow:\n  - Click \"Forgot Password\"\n  - Enter email\n  - Verify reset email sent message\n- [ ] Verify session persistence:\n  - Refresh page\n  - Confirm still logged in\n  - Check authentication state maintained\n\n### 2. Dashboard Overview\n- [ ] Verify dashboard loads successfully after login\n- [ ] Check all dashboard widgets render:\n  - Project statistics\n  - Recent activities\n  - Task summaries\n  - Progress indicators\n- [ ] Verify data loads from backend (not just static content)\n- [ ] Check for console errors\n- [ ] Verify responsive layout works (resize browser)\n\n## CORE PROJECT MANAGEMENT:\n\n### 3. Organizations\n- [ ] Navigate to Organizations page\n- [ ] Create new organization:\n  - Click \"New Organization\" or \"+\" button\n  - Enter organization name and description\n  - Set organization settings\n  - Save and verify creation\n- [ ] View organization details:\n  - Click on created organization\n  - Verify all details display correctly\n- [ ] Edit organization:\n  - Update name or description\n  - Save changes\n  - Verify updates persist after refresh\n- [ ] Organization member management:\n  - Invite member (if feature exists)\n  - View member list\n  - Check member roles/permissions display\n- [ ] Delete organization:\n  - Navigate back to organizations list\n  - Delete the test organization\n  - Verify deletion and list updates\n\n### 4. Projects\n- [ ] Navigate to Projects page\n- [ ] Create new project:\n  - Click \"New Project\" button\n  - Fill in project details:\n    - Name: \"E2E Test Project\"\n    - Description: \"Testing all features\"\n    - Status: \"Active\"\n    - Priority: \"High\"\n    - Start date and due date\n  - Assign to organization (if applicable)\n  - Save and verify creation\n- [ ] View project list:\n  - Verify new project appears in list\n  - Check project card shows correct info\n  - Verify progress indicators display\n- [ ] Filter and search projects:\n  - Use search bar to find project\n  - Filter by status (Planning, Active, On Hold, Completed, Cancelled)\n  - Filter by priority (Low, Medium, High, Urgent)\n  - Verify filters work correctly\n- [ ] View project details:\n  - Click on test project\n  - Verify project detail page loads\n  - Check all sections display:\n    - Overview\n    - Milestones\n    - Tasks\n    - Team members\n    - Activity feed\n- [ ] Edit project:\n  - Click edit button\n  - Modify project details\n  - Save changes\n  - Verify updates persist\n- [ ] Project team management:\n  - Add team member to project (if feature exists)\n  - View team member list\n  - Remove team member\n\n### 5. Milestones\n- [ ] Navigate to Milestones (within project or separate page)\n- [ ] Create new milestone:\n  - Click \"New Milestone\"\n  - Enter milestone details:\n    - Title: \"E2E Test Milestone\"\n    - Description\n    - Due date\n    - Associated project\n  - Save and verify creation\n- [ ] View milestone timeline:\n  - Check milestone appears in timeline\n  - Verify visual representation (dates, progress)\n- [ ] Edit milestone:\n  - Update milestone details\n  - Save changes\n  - Verify updates display correctly\n- [ ] Milestone progress tracking:\n  - Check progress percentage displays\n  - Verify task count shows correctly\n- [ ] Delete milestone:\n  - Delete test milestone\n  - Verify deletion and list updates\n\n### 6. Tasks\n- [ ] Navigate to Tasks page\n- [ ] Create new task:\n  - Click \"New Task\" or \"+\" button\n  - Fill in task details:\n    - Title: \"E2E Test Task\"\n    - Description: \"Testing task creation\"\n    - Status: \"Todo\"\n    - Priority: \"High\"\n    - Assignee (assign to yourself)\n    - Project (select test project)\n    - Milestone (if applicable)\n    - Due date\n    - Estimated hours\n  - Add tags (if feature exists)\n  - Save and verify creation\n- [ ] View task list:\n  - Verify new task appears\n  - Check task card shows all info correctly\n- [ ] Filter and search tasks:\n  - Search for task by title\n  - Filter by status (Todo, In Progress, Review, Done)\n  - Filter by priority\n  - Filter by assignee\n  - Verify all filters work\n- [ ] View task details:\n  - Click on task\n  - Verify task detail modal/page opens\n  - Check all fields display correctly\n- [ ] Edit task:\n  - Update task details\n  - Change status to \"In Progress\"\n  - Save changes\n  - Verify updates persist\n- [ ] Task status workflow:\n  - Move task through statuses:\n    - Todo → In Progress → Review → Done\n  - Verify status changes reflect in UI\n  - Check if progress updates cascade to project/milestone\n- [ ] Task comments (if feature exists):\n  - Add comment to task\n  - Verify comment appears\n  - Edit comment\n  - Delete comment\n- [ ] Delete task:\n  - Delete test task\n  - Verify deletion\n\n### 7. Kanban Board\n- [ ] Navigate to Kanban board view\n- [ ] Verify board displays with columns:\n  - Todo\n  - In Progress\n  - Review\n  - Done\n- [ ] Create task from board:\n  - Click \"+\" in a column\n  - Quick create task\n  - Verify appears in correct column\n- [ ] Drag and drop tasks:\n  - Drag task from Todo to In Progress\n  - Verify task moves\n  - Check status updates in backend (refresh page to confirm)\n  - Drag task to different columns\n  - Verify all drag operations work smoothly\n- [ ] View task details from board:\n  - Click task card\n  - Verify detail modal opens\n  - Make changes\n  - Close and verify updates on board\n\n## ADVANCED FEATURES:\n\n### 8. Goals System\n- [ ] Navigate to Goals page\n- [ ] Create new goal:\n  - Click \"New Goal\" or \"Create Goal\"\n  - Enter goal details:\n    - Title: \"E2E Test Goal\"\n    - Description\n    - Target date\n    - Key results/metrics\n  - Link to project (if applicable)\n  - Save and verify creation\n- [ ] View goals dashboard:\n  - Check goal appears in list\n  - Verify progress indicators\n  - Check visual representations (charts, graphs)\n- [ ] Goal progress tracking:\n  - Update progress/metrics\n  - Verify progress bar updates\n  - Check milestone completion impacts goal progress\n- [ ] Edit and delete goal:\n  - Edit goal details\n  - Save changes\n  - Delete test goal\n\n### 9. Time Tracking\n- [ ] Navigate to Time Tracking section\n- [ ] Start timer:\n  - Click \"Start Timer\" or timer icon\n  - Enter description: \"E2E Testing\"\n  - Select project and task (if applicable)\n  - Verify timer starts and counts up\n- [ ] Pause and resume timer:\n  - Pause timer\n  - Verify timer pauses\n  - Resume timer\n  - Verify timer continues\n- [ ] Stop timer:\n  - Stop timer\n  - Verify time entry created\n  - Check time entry appears in list\n- [ ] Manual time entry:\n  - Add manual time entry\n  - Specify start and end time\n  - Enter description\n  - Save and verify creation\n- [ ] View time entries:\n  - Check time entries list displays\n  - Verify duration calculations correct\n  - Filter by date range\n  - Filter by project/task\n- [ ] Edit time entry:\n  - Modify duration or description\n  - Save changes\n  - Verify updates persist\n- [ ] Delete time entry:\n  - Delete test time entry\n  - Verify deletion\n- [ ] Time reports (if feature exists):\n  - Generate time report\n  - Check totals by project/task\n  - Verify export functionality (if available)\n\n### 10. File Attachments & Uploads\n- [ ] Navigate to a task or project with file upload capability\n- [ ] Upload files:\n  - Click upload button or drag-and-drop area\n  - Select file(s) from computer (try different types: PDF, image, document)\n  - Verify upload progress indicator shows\n  - Confirm file appears in attachments list\n- [ ] View uploaded files:\n  - Click on file to preview/download\n  - Verify file opens correctly\n- [ ] Upload multiple files:\n  - Upload 3-5 files at once\n  - Verify all upload successfully\n  - Check file size limits enforced (try large file if size limit exists)\n- [ ] Delete attachment:\n  - Remove uploaded file\n  - Verify deletion\n\n### 11. Comments & Collaboration\n- [ ] Navigate to task or project with comments\n- [ ] Add comment:\n  - Type comment: \"Testing comments feature\"\n  - Submit comment\n  - Verify comment appears immediately\n- [ ] Rich text formatting (if available):\n  - Try bold, italic, lists, links\n  - Verify formatting renders correctly\n- [ ] Mention users (if feature exists):\n  - Use @ to mention user\n  - Verify mention suggestion appears\n  - Submit comment with mention\n- [ ] Edit comment:\n  - Edit existing comment\n  - Save changes\n  - Verify edit indicator shows\n- [ ] Delete comment:\n  - Delete test comment\n  - Verify removal\n- [ ] Comment reactions (if feature exists):\n  - Add reaction to comment\n  - Remove reaction\n- [ ] Real-time updates (if feature exists):\n  - Open same task in another browser/incognito window\n  - Add comment in one window\n  - Verify comment appears in other window without refresh\n\n### 12. Notifications System\n- [ ] Navigate to notifications area (bell icon or notifications page)\n- [ ] View notifications:\n  - Check notifications list displays\n  - Verify unread count accurate\n- [ ] Trigger notifications:\n  - Perform actions that generate notifications:\n    - Create task assigned to you\n    - Comment on task\n    - Update project status\n  - Check if notifications appear\n- [ ] Mark as read:\n  - Click notification\n  - Verify marked as read\n  - Check unread count decreases\n- [ ] Notification preferences (if feature exists):\n  - Navigate to settings\n  - Update notification preferences\n  - Save changes\n\n### 13. Search Functionality\n- [ ] Navigate to global search (usually in header)\n- [ ] Search for content:\n  - Search for project name\n  - Verify results include project\n  - Search for task title\n  - Verify results include task\n  - Search for user name\n  - Verify results include user (if applicable)\n- [ ] Search filters:\n  - Apply filters (by type: projects, tasks, etc.)\n  - Verify filtered results correct\n- [ ] Search navigation:\n  - Click search result\n  - Verify navigates to correct item\n\n### 14. Analytics & Reporting\n- [ ] Navigate to Analytics or Reports section\n- [ ] Project analytics:\n  - View project progress charts\n  - Check task completion metrics\n  - Verify data visualizations render\n  - Check for console errors in charts\n- [ ] Performance metrics:\n  - View performance dashboard (if exists)\n  - Check API response times display\n  - Verify system metrics load\n- [ ] Export reports:\n  - Generate report\n  - Export to CSV/PDF (if available)\n  - Verify export downloads correctly\n\n### 15. Critical Path Analysis\n- [ ] Navigate to Critical Path section (if available)\n- [ ] View critical path:\n  - Check critical path visualization displays\n  - Verify task dependencies shown\n  - Check path highlights correctly\n- [ ] Analyze bottlenecks:\n  - Identify critical tasks\n  - Verify bottleneck detection works\n\n## AI FEATURES:\n\n### 16. AI Chat Widget\n- [ ] Locate AI chat widget (usually bottom-right corner)\n- [ ] Open chat widget:\n  - Click on AI chat icon\n  - Verify chat window opens\n  - Check for any styling issues (border, padding, layout)\n- [ ] Test AI conversation:\n  - Type message: \"Hello, can you help me create a project?\"\n  - Send message\n  - Verify AI responds (may take 30-60 seconds with Ollama)\n  - **IMPORTANT**: If you get 504 timeout, note it but continue - this is expected if Ollama is slow\n  - Check if response is relevant and helpful\n- [ ] Test project creation via AI:\n  - Ask: \"Create a project called 'AI Test Project' with description 'Created by AI'\"\n  - Verify AI attempts to create project\n  - Check if project actually created in system\n- [ ] Test AI understanding:\n  - Ask: \"What are my active projects?\"\n  - Ask: \"Show me my tasks due this week\"\n  - Verify AI provides relevant information\n- [ ] Chat history:\n  - Close chat widget\n  - Reopen\n  - Verify conversation history persists\n- [ ] Clear chat (if feature exists):\n  - Clear conversation\n  - Verify chat clears\n\n### 17. Ollama Integration (Natural Language Project Creation)\n- [ ] Navigate to Projects page\n- [ ] Look for AI-powered creation option (if visible in UI)\n- [ ] Test natural language input (if direct UI exists):\n  - Enter: \"Create a mobile app project with authentication, user profiles, and real-time messaging features\"\n  - Submit\n  - Verify AI parses and creates:\n    - Project\n    - Logical milestones (3-7)\n    - Tasks under each milestone\n  - Check data structure and quality\n- [ ] Verify AI-generated content:\n  - Open created project\n  - Check milestones make sense\n  - Verify tasks are properly organized\n  - Confirm descriptions are coherent\n\n## USER INTERFACE & DESIGN:\n\n### 18. Design System & Styling\n- [ ] Verify design tokens applied:\n  - Check dark navy sidebar (#1E293B)\n  - Verify blue primary color (#3B82F6)\n  - Check clean white backgrounds\n  - Verify professional gray scale\n- [ ] Sidebar navigation:\n  - Click through all nav items\n  - Verify active states highlight correctly\n  - Check hover effects work\n  - Verify icons display properly\n- [ ] Header:\n  - Check logo displays\n  - Verify user menu works\n  - Test notifications bell\n  - Check search bar functions\n- [ ] Theme consistency:\n  - Verify colors consistent across pages\n  - Check typography consistent\n  - Verify spacing/padding uniform\n\n### 19. Responsive Design\n- [ ] Desktop view (1920x1080):\n  - Verify layout optimal\n  - Check all elements visible\n  - Test interactions\n- [ ] Tablet view (768x1024):\n  - Resize browser to tablet size\n  - Verify layout adjusts\n  - Check sidebar behavior (collapse/expand)\n  - Test all key features still accessible\n- [ ] Mobile view (375x667):\n  - Resize to mobile size\n  - Verify mobile menu works\n  - Check cards stack properly\n  - Test touch interactions (if possible)\n  - Verify no horizontal scroll\n- [ ] Test on different browsers:\n  - Chrome (primary)\n  - Firefox\n  - Safari (if on Mac)\n  - Edge\n\n### 20. Accessibility\n- [ ] Keyboard navigation:\n  - Tab through all interactive elements\n  - Verify focus indicators visible\n  - Test keyboard shortcuts (if any)\n  - Verify forms accessible via keyboard\n- [ ] Screen reader (if available):\n  - Turn on screen reader\n  - Navigate through page\n  - Verify labels read correctly\n- [ ] Color contrast:\n  - Check text readable on all backgrounds\n  - Verify contrast meets WCAG standards\n- [ ] Alt text:\n  - Inspect images\n  - Verify alt attributes present\n\n## REAL-TIME FEATURES:\n\n### 21. Real-time Collaboration\n- [ ] Open two browser windows/tabs\n- [ ] Sign in to both (same or different users)\n- [ ] Test real-time updates:\n  - Create task in window 1\n  - Verify appears in window 2 without refresh\n  - Update task status in window 2\n  - Verify updates in window 1\n- [ ] Test real-time presence (if feature exists):\n  - View who's online\n  - Check presence indicators update\n\n### 22. Live Notifications\n- [ ] Keep two windows open\n- [ ] Trigger notification in one window:\n  - Assign task to user in window 1\n- [ ] Check notification in window 2:\n  - Verify notification bell updates\n  - Check notification appears without refresh\n\n## DATA INTEGRITY & PERSISTENCE:\n\n### 23. Data Persistence\n- [ ] Create project with full details\n- [ ] Create milestone linked to project  \n- [ ] Create task linked to milestone\n- [ ] Add comments, attachments\n- [ ] **Close browser completely**\n- [ ] **Reopen and sign in**\n- [ ] Verify all data persists:\n  - Project exists with all details\n  - Milestone exists and linked correctly\n  - Task exists with all fields\n  - Comments and attachments intact\n\n### 24. Data Validation\n- [ ] Test form validation:\n  - Try to create project without name\n  - Verify error message shows\n  - Try invalid email format\n  - Try invalid date ranges\n  - Verify all validations work\n- [ ] Test data constraints:\n  - Try to assign task to non-existent user (if possible)\n  - Try to link milestone to non-existent project\n  - Verify system prevents invalid data\n\n## SETTINGS & CONFIGURATION:\n\n### 25. User Settings\n- [ ] Navigate to Settings/Profile\n- [ ] Update profile:\n  - Change name\n  - Update email (if allowed)\n  - Upload profile picture (if feature exists)\n  - Save changes\n  - Verify updates persist\n- [ ] Notification preferences:\n  - Toggle email notifications\n  - Toggle push notifications\n  - Save preferences\n  - Verify settings saved\n- [ ] Theme settings (if exists):\n  - Switch between light/dark mode\n  - Verify theme changes\n  - Refresh and verify preference persists\n- [ ] Password change:\n  - Navigate to security settings\n  - Change password\n  - Sign out\n  - Sign in with new password\n  - Verify works\n\n### 26. Organization Settings (if admin)\n- [ ] Navigate to organization settings\n- [ ] Update organization details\n- [ ] Manage members:\n  - Invite member\n  - Update member role\n  - Remove member\n- [ ] Organization preferences:\n  - Update visibility settings\n  - Update default project settings\n  - Save changes\n\n## PERFORMANCE & RELIABILITY:\n\n### 27. Performance Testing\n- [ ] Open browser DevTools (F12)\n- [ ] Go to Network tab\n- [ ] Navigate through key pages:\n  - Dashboard\n  - Projects list\n  - Project details\n  - Tasks list\n- [ ] Check for performance issues:\n  - Note slow-loading pages (>3 seconds)\n  - Check for failed requests (red in Network tab)\n  - Look for 4xx/5xx errors\n  - Note any timeout errors\n- [ ] Check Console for errors:\n  - Red errors = critical issues\n  - Yellow warnings = note but may not be critical\n  - Document all errors found\n\n### 28. Error Handling\n- [ ] Test error scenarios:\n  - Try to access non-existent project (modify URL)\n  - Verify 404 page shows\n  - Try to perform action without permission\n  - Verify appropriate error message\n  - Disconnect internet briefly\n  - Verify offline handling (if implemented)\n- [ ] Test form error handling:\n  - Submit invalid data\n  - Verify error messages clear and helpful\n  - Fix errors and resubmit\n  - Verify success handling\n\n## EDGE CASES & STRESS TESTING:\n\n### 29. Edge Cases\n- [ ] Test with extreme data:\n  - Create project with very long name (500+ characters)\n  - Create task with very long description (5000+ words)\n  - Verify system handles gracefully\n- [ ] Test with special characters:\n  - Use emojis in project names: \"🚀 Test Project 🎉\"\n  - Use special characters: \"Test & Project <script>alert('xss')</script>\"\n  - Verify proper escaping/sanitization\n- [ ] Test with empty data:\n  - Try to create project with just spaces\n  - Verify validation catches it\n\n### 30. Load Testing (Light)\n- [ ] Create multiple items rapidly:\n  - Create 10 tasks quickly\n  - Create 5 projects\n  - Upload multiple files\n  - Verify system handles without errors\n- [ ] Test pagination:\n  - If lists paginate, verify pagination works\n  - Navigate through pages\n  - Change items per page\n\n## INTEGRATION TESTING:\n\n### 31. Cross-Feature Integration\n- [ ] Create complete workflow:\n  1. Create organization\n  2. Create project in organization\n  3. Create milestone in project\n  4. Create task in milestone\n  5. Assign task to yourself\n  6. Add comment to task\n  7. Attach file to task\n  8. Start timer for task\n  9. Complete task\n  10. Verify cascading updates:\n      - Task completion affects milestone progress\n      - Milestone progress affects project progress\n      - Notifications generated appropriately\n      - Activity feed updates\n      - Analytics reflect changes\n\n### 32. API Integration\n- [ ] Check API responses (in Network tab):\n  - Verify API endpoints return data\n  - Check for /api/projects, /api/tasks, /api/milestones\n  - Note any 500 errors\n  - Verify response times reasonable (<2s)\n\n### 33. Database Integration\n- [ ] Verify Supabase connection:\n  - All CRUD operations work\n  - Data persists across sessions\n  - Real-time updates work (Supabase realtime)\n  - No connection errors in console\n\n## SECURITY TESTING:\n\n### 34. Authentication Security\n- [ ] Test unauthorized access:\n  - Sign out\n  - Try to access /dashboard directly\n  - Verify redirects to login\n- [ ] Test session management:\n  - Check session timeout (if implemented)\n  - Verify secure cookie handling\n- [ ] Test RBAC (if implemented):\n  - Try to access admin features as regular user\n  - Verify proper access control\n\n### 35. Input Security\n- [ ] Test XSS prevention:\n  - Enter: <script>alert('xss')</script> in text fields\n  - Verify script doesn't execute\n  - Check proper escaping\n- [ ] Test SQL injection (basic):\n  - Enter: ' OR '1'='1 in search\n  - Verify no database errors\n  - System should handle safely\n\n## FINAL CHECKS:\n\n### 36. Browser Console Review\n- [ ] Check for errors:\n  - Open DevTools Console\n  - Filter to Errors only\n  - Document all errors found\n  - Note pages where errors occur\n- [ ] Check for warnings:\n  - Note significant warnings\n  - Deprecation warnings\n  - Performance warnings\n\n### 37. Network Tab Review  \n- [ ] Check failed requests:\n  - Filter by Failed in Network tab\n  - Document any 404s, 500s, timeouts\n  - Note which endpoints fail\n- [ ] Check slow requests:\n  - Sort by Time\n  - Note requests >5 seconds\n  - Document slow endpoints\n\n### 38. Lighthouse Audit (Chrome only)\n- [ ] Run Lighthouse:\n  - Open DevTools\n  - Go to Lighthouse tab\n  - Run audit for:\n    - Performance\n    - Accessibility  \n    - Best Practices\n    - SEO\n  - Note scores and major issues\n\n### 39. Final Cleanup\n- [ ] Delete all test data:\n  - Delete test projects\n  - Delete test tasks\n  - Delete test organizations\n  - Delete test comments\n  - Remove test files\n- [ ] Sign out\n- [ ] Verify logout successful\n\n## REPORTING:\n\nAfter completing ALL tests above, provide a comprehensive report in this format:\n\n### EXECUTIVE SUMMARY\n- Overall status: [PASS / FAIL / PARTIAL]\n- Total features tested: [number]\n- Features working: [number]\n- Features broken: [number]\n- Critical issues: [number]\n- Minor issues: [number]\n\n### CRITICAL ISSUES (Blocking/Broken Features)\nList all features that are completely broken or blocking:\n1. [Issue description]\n   - Page/Feature: [where]\n   - Steps to reproduce: [steps]\n   - Expected: [expected behavior]\n   - Actual: [actual behavior]\n   - Error messages: [any errors]\n   - Screenshot: [if taken]\n\n### MAJOR ISSUES (Features Work but Have Problems)\nList features that work but have significant issues:\n1. [Issue description]\n   - Impact: [how it affects users]\n   - Frequency: [always/sometimes/rare]\n\n### MINOR ISSUES (Small Problems, Edge Cases)\nList small issues, cosmetic problems, edge cases:\n1. [Issue description]\n\n### FEATURES WORKING PERFECTLY\nList all features that work flawlessly:\n- [Feature 1]\n- [Feature 2]\n- ...\n\n### PERFORMANCE ANALYSIS\n- Average page load time: [seconds]\n- Slowest page: [page name] - [time]\n- Failed API calls: [list endpoints]\n- Console errors: [count]\n- Console warnings: [count]\n- Lighthouse scores:\n  - Performance: [score/100]\n  - Accessibility: [score/100]\n  - Best Practices: [score/100]\n  - SEO: [score/100]\n\n### BROWSER COMPATIBILITY\n- Chrome: [PASS/FAIL/ISSUES]\n- Firefox: [PASS/FAIL/ISSUES]\n- Safari: [PASS/FAIL/ISSUES]\n- Edge: [PASS/FAIL/ISSUES]\n\n### RESPONSIVE DESIGN\n- Desktop (1920x1080): [PASS/FAIL/ISSUES]\n- Tablet (768x1024): [PASS/FAIL/ISSUES]\n- Mobile (375x667): [PASS/FAIL/ISSUES]\n\n### AI FEATURES STATUS\n- AI Chat Widget: [PASS/FAIL/ISSUES]\n- Ollama Integration: [PASS/FAIL/ISSUES]\n- Natural Language Processing: [PASS/FAIL/ISSUES]\n- Response Time: [average seconds]\n- Response Quality: [rating 1-10]\n\n### REAL-TIME FEATURES STATUS\n- Real-time updates: [PASS/FAIL]\n- Presence indicators: [PASS/FAIL]\n- Live notifications: [PASS/FAIL]\n- Supabase realtime: [PASS/FAIL]\n\n### SECURITY ASSESSMENT\n- Authentication: [SECURE/ISSUES]\n- Authorization: [SECURE/ISSUES]\n- XSS Protection: [SECURE/ISSUES]\n- Input Validation: [SECURE/ISSUES]\n\n### RECOMMENDATIONS\nList recommendations for improvements:\n1. [Recommendation 1]\n2. [Recommendation 2]\n3. ...\n\n### PRIORITY FIXES\nList issues that should be fixed immediately:\n1. [Priority 1 - Critical]\n2. [Priority 2 - High]\n3. [Priority 3 - Medium]\n\n### CONCLUSION\nOverall assessment of the application:\n- Production readiness: [%]\n- User experience quality: [rating 1-10]\n- Feature completeness: [%]\n- Stability: [rating 1-10]\n- Final verdict: [Ready for production / Needs fixes / Major overhaul needed]\n\n## ADDITIONAL CONTEXT:\n\n- **Application Stack**: Next.js 14, React, TypeScript, Tailwind CSS, Supabase (PostgreSQL + Realtime), Ollama (AI), Netlify (hosting)\n- **Expected Issues**: Ollama AI responses may be slow (30-60 seconds) or timeout with 504 errors - this is known and related to server configuration\n- **Recent Changes**: All build errors fixed, exhaustive-deps warnings resolved, TypeScript errors fixed, design tokens applied\n- **Design System**: Dark navy sidebar (#1E293B), blue primary (#3B82F6), professional gray scale, comprehensive spacing and typography\n\nBe thorough, systematic, and document everything. Good luck!",

  "testing_checklist_summary": [
    "Authentication & User Management (sign up, sign in, password reset, session)",
    "Dashboard & Overview",
    "Organizations (CRUD operations)",
    "Projects (CRUD, filtering, team management)",
    "Milestones (CRUD, timeline, progress)",
    "Tasks (CRUD, filtering, status workflow, comments)",
    "Kanban Board (drag-and-drop, real-time updates)",
    "Goals System",
    "Time Tracking (timer, manual entry, reports)",
    "File Attachments & Uploads",
    "Comments & Collaboration",
    "Notifications",
    "Search Functionality",
    "Analytics & Reporting",
    "Critical Path Analysis",
    "AI Chat Widget",
    "Ollama Natural Language Integration",
    "Design System & Styling",
    "Responsive Design (desktop, tablet, mobile)",
    "Accessibility",
    "Real-time Collaboration",
    "Live Notifications",
    "Data Persistence",
    "Data Validation",
    "User Settings",
    "Organization Settings",
    "Performance Testing",
    "Error Handling",
    "Edge Cases",
    "Load Testing",
    "Cross-Feature Integration",
    "API Integration",
    "Database Integration",
    "Security Testing",
    "Browser Console Review",
    "Network Tab Review",
    "Lighthouse Audit",
    "Final Cleanup"
  ],

  "expected_testing_time": "15-20 minutes for comprehensive testing",

  "critical_areas": [
    "Authentication flow must work",
    "CRUD operations for projects, tasks, milestones",
    "Real-time updates via Supabase",
    "AI chat widget (may be slow but should not crash)",
    "Data persistence across sessions",
    "Responsive design on all screen sizes"
  ],

  "known_issues": [
    "Ollama AI may respond slowly (30-60 seconds)",
    "AI chat may timeout with 504 errors if Ollama overloaded",
    "These are expected and related to Ollama server configuration"
  ]
}
